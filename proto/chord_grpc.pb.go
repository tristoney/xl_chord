// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordClient interface {
	CheckAlive(ctx context.Context, in *CheckAliveReq, opts ...grpc.CallOption) (*CheckAliveResp, error)
	FindSuccessor(ctx context.Context, in *FindSuccessorReq, opts ...grpc.CallOption) (*FindSuccessorResp, error)
	GetPredecessor(ctx context.Context, in *GetPredecessorReq, opts ...grpc.CallOption) (*GetPredecessorResp, error)
	Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyResp, error)
	FindSuccessorFinger(ctx context.Context, in *FindSuccessorFingerReq, opts ...grpc.CallOption) (*FindSuccessorFingerResp, error)
	GetSuccessorList(ctx context.Context, in *GetSuccessorListReq, opts ...grpc.CallOption) (*GetSuccessorListResp, error)
	StoreKey(ctx context.Context, in *StoreKeyReq, opts ...grpc.CallOption) (*StoreKeyResp, error)
	FindKey(ctx context.Context, in *FindKeyReq, opts ...grpc.CallOption) (*FindKeyResp, error)
	DeleteKey(ctx context.Context, in *DeleteKeyReq, opts ...grpc.CallOption) (*DeleteKeyResp, error)
	TakeOverKeys(ctx context.Context, in *TakeOverKeysReq, opts ...grpc.CallOption) (*TakeOverKeysResp, error)
	BackUpFromPredecessor(ctx context.Context, in *BackUpFromPredecessorReq, opts ...grpc.CallOption) (*BackUpFromPredecessorResp, error)
	BackUpFromSuccessor(ctx context.Context, in *BackUpFromSuccessorReq, opts ...grpc.CallOption) (*BackUpFromSuccessorResp, error)
	DeletePredecessorReplicaKey(ctx context.Context, in *DeletePredecessorReplicaKeyReq, opts ...grpc.CallOption) (*DeletePredecessorReplicaKeyResp, error)
	DeleteSuccessorReplicaKey(ctx context.Context, in *DeleteSuccessorReplicaKeyReq, opts ...grpc.CallOption) (*DeleteSuccessorReplicaKeyResp, error)
	AppendPredecessorReplica(ctx context.Context, in *AppendPredecessorReplicaReq, opts ...grpc.CallOption) (*AppendPredecessorReplicaResp, error)
	AppendSuccessorReplica(ctx context.Context, in *AppendSuccessorReplicaReq, opts ...grpc.CallOption) (*AppendSuccessorReplicaResp, error)
}

type chordClient struct {
	cc grpc.ClientConnInterface
}

func NewChordClient(cc grpc.ClientConnInterface) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) CheckAlive(ctx context.Context, in *CheckAliveReq, opts ...grpc.CallOption) (*CheckAliveResp, error) {
	out := new(CheckAliveResp)
	err := c.cc.Invoke(ctx, "/Chord/CheckAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *FindSuccessorReq, opts ...grpc.CallOption) (*FindSuccessorResp, error) {
	out := new(FindSuccessorResp)
	err := c.cc.Invoke(ctx, "/Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessor(ctx context.Context, in *GetPredecessorReq, opts ...grpc.CallOption) (*GetPredecessorResp, error) {
	out := new(GetPredecessorResp)
	err := c.cc.Invoke(ctx, "/Chord/GetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyResp, error) {
	out := new(NotifyResp)
	err := c.cc.Invoke(ctx, "/Chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessorFinger(ctx context.Context, in *FindSuccessorFingerReq, opts ...grpc.CallOption) (*FindSuccessorFingerResp, error) {
	out := new(FindSuccessorFingerResp)
	err := c.cc.Invoke(ctx, "/Chord/FindSuccessorFinger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessorList(ctx context.Context, in *GetSuccessorListReq, opts ...grpc.CallOption) (*GetSuccessorListResp, error) {
	out := new(GetSuccessorListResp)
	err := c.cc.Invoke(ctx, "/Chord/GetSuccessorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) StoreKey(ctx context.Context, in *StoreKeyReq, opts ...grpc.CallOption) (*StoreKeyResp, error) {
	out := new(StoreKeyResp)
	err := c.cc.Invoke(ctx, "/Chord/StoreKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindKey(ctx context.Context, in *FindKeyReq, opts ...grpc.CallOption) (*FindKeyResp, error) {
	out := new(FindKeyResp)
	err := c.cc.Invoke(ctx, "/Chord/FindKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) DeleteKey(ctx context.Context, in *DeleteKeyReq, opts ...grpc.CallOption) (*DeleteKeyResp, error) {
	out := new(DeleteKeyResp)
	err := c.cc.Invoke(ctx, "/Chord/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) TakeOverKeys(ctx context.Context, in *TakeOverKeysReq, opts ...grpc.CallOption) (*TakeOverKeysResp, error) {
	out := new(TakeOverKeysResp)
	err := c.cc.Invoke(ctx, "/Chord/TakeOverKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) BackUpFromPredecessor(ctx context.Context, in *BackUpFromPredecessorReq, opts ...grpc.CallOption) (*BackUpFromPredecessorResp, error) {
	out := new(BackUpFromPredecessorResp)
	err := c.cc.Invoke(ctx, "/Chord/BackUpFromPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) BackUpFromSuccessor(ctx context.Context, in *BackUpFromSuccessorReq, opts ...grpc.CallOption) (*BackUpFromSuccessorResp, error) {
	out := new(BackUpFromSuccessorResp)
	err := c.cc.Invoke(ctx, "/Chord/BackUpFromSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) DeletePredecessorReplicaKey(ctx context.Context, in *DeletePredecessorReplicaKeyReq, opts ...grpc.CallOption) (*DeletePredecessorReplicaKeyResp, error) {
	out := new(DeletePredecessorReplicaKeyResp)
	err := c.cc.Invoke(ctx, "/Chord/DeletePredecessorReplicaKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) DeleteSuccessorReplicaKey(ctx context.Context, in *DeleteSuccessorReplicaKeyReq, opts ...grpc.CallOption) (*DeleteSuccessorReplicaKeyResp, error) {
	out := new(DeleteSuccessorReplicaKeyResp)
	err := c.cc.Invoke(ctx, "/Chord/DeleteSuccessorReplicaKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) AppendPredecessorReplica(ctx context.Context, in *AppendPredecessorReplicaReq, opts ...grpc.CallOption) (*AppendPredecessorReplicaResp, error) {
	out := new(AppendPredecessorReplicaResp)
	err := c.cc.Invoke(ctx, "/Chord/AppendPredecessorReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) AppendSuccessorReplica(ctx context.Context, in *AppendSuccessorReplicaReq, opts ...grpc.CallOption) (*AppendSuccessorReplicaResp, error) {
	out := new(AppendSuccessorReplicaResp)
	err := c.cc.Invoke(ctx, "/Chord/AppendSuccessorReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
// All implementations should embed UnimplementedChordServer
// for forward compatibility
type ChordServer interface {
	CheckAlive(context.Context, *CheckAliveReq) (*CheckAliveResp, error)
	FindSuccessor(context.Context, *FindSuccessorReq) (*FindSuccessorResp, error)
	GetPredecessor(context.Context, *GetPredecessorReq) (*GetPredecessorResp, error)
	Notify(context.Context, *NotifyReq) (*NotifyResp, error)
	FindSuccessorFinger(context.Context, *FindSuccessorFingerReq) (*FindSuccessorFingerResp, error)
	GetSuccessorList(context.Context, *GetSuccessorListReq) (*GetSuccessorListResp, error)
	StoreKey(context.Context, *StoreKeyReq) (*StoreKeyResp, error)
	FindKey(context.Context, *FindKeyReq) (*FindKeyResp, error)
	DeleteKey(context.Context, *DeleteKeyReq) (*DeleteKeyResp, error)
	TakeOverKeys(context.Context, *TakeOverKeysReq) (*TakeOverKeysResp, error)
	BackUpFromPredecessor(context.Context, *BackUpFromPredecessorReq) (*BackUpFromPredecessorResp, error)
	BackUpFromSuccessor(context.Context, *BackUpFromSuccessorReq) (*BackUpFromSuccessorResp, error)
	DeletePredecessorReplicaKey(context.Context, *DeletePredecessorReplicaKeyReq) (*DeletePredecessorReplicaKeyResp, error)
	DeleteSuccessorReplicaKey(context.Context, *DeleteSuccessorReplicaKeyReq) (*DeleteSuccessorReplicaKeyResp, error)
	AppendPredecessorReplica(context.Context, *AppendPredecessorReplicaReq) (*AppendPredecessorReplicaResp, error)
	AppendSuccessorReplica(context.Context, *AppendSuccessorReplicaReq) (*AppendSuccessorReplicaResp, error)
}

// UnimplementedChordServer should be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (UnimplementedChordServer) CheckAlive(context.Context, *CheckAliveReq) (*CheckAliveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAlive not implemented")
}
func (UnimplementedChordServer) FindSuccessor(context.Context, *FindSuccessorReq) (*FindSuccessorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServer) GetPredecessor(context.Context, *GetPredecessorReq) (*GetPredecessorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (UnimplementedChordServer) Notify(context.Context, *NotifyReq) (*NotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServer) FindSuccessorFinger(context.Context, *FindSuccessorFingerReq) (*FindSuccessorFingerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessorFinger not implemented")
}
func (UnimplementedChordServer) GetSuccessorList(context.Context, *GetSuccessorListReq) (*GetSuccessorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorList not implemented")
}
func (UnimplementedChordServer) StoreKey(context.Context, *StoreKeyReq) (*StoreKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKey not implemented")
}
func (UnimplementedChordServer) FindKey(context.Context, *FindKeyReq) (*FindKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindKey not implemented")
}
func (UnimplementedChordServer) DeleteKey(context.Context, *DeleteKeyReq) (*DeleteKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedChordServer) TakeOverKeys(context.Context, *TakeOverKeysReq) (*TakeOverKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeOverKeys not implemented")
}
func (UnimplementedChordServer) BackUpFromPredecessor(context.Context, *BackUpFromPredecessorReq) (*BackUpFromPredecessorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackUpFromPredecessor not implemented")
}
func (UnimplementedChordServer) BackUpFromSuccessor(context.Context, *BackUpFromSuccessorReq) (*BackUpFromSuccessorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackUpFromSuccessor not implemented")
}
func (UnimplementedChordServer) DeletePredecessorReplicaKey(context.Context, *DeletePredecessorReplicaKeyReq) (*DeletePredecessorReplicaKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredecessorReplicaKey not implemented")
}
func (UnimplementedChordServer) DeleteSuccessorReplicaKey(context.Context, *DeleteSuccessorReplicaKeyReq) (*DeleteSuccessorReplicaKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSuccessorReplicaKey not implemented")
}
func (UnimplementedChordServer) AppendPredecessorReplica(context.Context, *AppendPredecessorReplicaReq) (*AppendPredecessorReplicaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPredecessorReplica not implemented")
}
func (UnimplementedChordServer) AppendSuccessorReplica(context.Context, *AppendSuccessorReplicaReq) (*AppendSuccessorReplicaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendSuccessorReplica not implemented")
}

// UnsafeChordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServer will
// result in compilation errors.
type UnsafeChordServer interface {
	mustEmbedUnimplementedChordServer()
}

func RegisterChordServer(s grpc.ServiceRegistrar, srv ChordServer) {
	s.RegisterService(&Chord_ServiceDesc, srv)
}

func _Chord_CheckAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAliveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).CheckAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/CheckAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).CheckAlive(ctx, req.(*CheckAliveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccessorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*FindSuccessorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredecessorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessor(ctx, req.(*GetPredecessorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessorFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccessorFingerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessorFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/FindSuccessorFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessorFinger(ctx, req.(*FindSuccessorFingerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuccessorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/GetSuccessorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessorList(ctx, req.(*GetSuccessorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_StoreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).StoreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/StoreKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).StoreKey(ctx, req.(*StoreKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/FindKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindKey(ctx, req.(*FindKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).DeleteKey(ctx, req.(*DeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_TakeOverKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeOverKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).TakeOverKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/TakeOverKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).TakeOverKeys(ctx, req.(*TakeOverKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_BackUpFromPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackUpFromPredecessorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).BackUpFromPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/BackUpFromPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).BackUpFromPredecessor(ctx, req.(*BackUpFromPredecessorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_BackUpFromSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackUpFromSuccessorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).BackUpFromSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/BackUpFromSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).BackUpFromSuccessor(ctx, req.(*BackUpFromSuccessorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_DeletePredecessorReplicaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredecessorReplicaKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).DeletePredecessorReplicaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/DeletePredecessorReplicaKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).DeletePredecessorReplicaKey(ctx, req.(*DeletePredecessorReplicaKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_DeleteSuccessorReplicaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSuccessorReplicaKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).DeleteSuccessorReplicaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/DeleteSuccessorReplicaKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).DeleteSuccessorReplicaKey(ctx, req.(*DeleteSuccessorReplicaKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_AppendPredecessorReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPredecessorReplicaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).AppendPredecessorReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/AppendPredecessorReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).AppendPredecessorReplica(ctx, req.(*AppendPredecessorReplicaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_AppendSuccessorReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendSuccessorReplicaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).AppendSuccessorReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/AppendSuccessorReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).AppendSuccessorReplica(ctx, req.(*AppendSuccessorReplicaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chord_ServiceDesc is the grpc.ServiceDesc for Chord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAlive",
			Handler:    _Chord_CheckAlive_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _Chord_GetPredecessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "FindSuccessorFinger",
			Handler:    _Chord_FindSuccessorFinger_Handler,
		},
		{
			MethodName: "GetSuccessorList",
			Handler:    _Chord_GetSuccessorList_Handler,
		},
		{
			MethodName: "StoreKey",
			Handler:    _Chord_StoreKey_Handler,
		},
		{
			MethodName: "FindKey",
			Handler:    _Chord_FindKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _Chord_DeleteKey_Handler,
		},
		{
			MethodName: "TakeOverKeys",
			Handler:    _Chord_TakeOverKeys_Handler,
		},
		{
			MethodName: "BackUpFromPredecessor",
			Handler:    _Chord_BackUpFromPredecessor_Handler,
		},
		{
			MethodName: "BackUpFromSuccessor",
			Handler:    _Chord_BackUpFromSuccessor_Handler,
		},
		{
			MethodName: "DeletePredecessorReplicaKey",
			Handler:    _Chord_DeletePredecessorReplicaKey_Handler,
		},
		{
			MethodName: "DeleteSuccessorReplicaKey",
			Handler:    _Chord_DeleteSuccessorReplicaKey_Handler,
		},
		{
			MethodName: "AppendPredecessorReplica",
			Handler:    _Chord_AppendPredecessorReplica_Handler,
		},
		{
			MethodName: "AppendSuccessorReplica",
			Handler:    _Chord_AppendSuccessorReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chord.proto",
}
